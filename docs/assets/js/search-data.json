{
  "1": {
    "id": "1",
    "title": "Avatar",
    "content": "Avatar O m-avatar é responsável pela renderização do avatar do usuário, seja uma imagem ou as iniciais de seu nome. Exemplo HTML &lt;m-avatar source=&quot;https://cms.qz.com/wp-content/uploads/2018/12/earring2.png&quot; data-alt=&quot;Alternative description&quot;&gt;&lt;/m-avatar&gt; &lt;m-avatar source=&quot;Mary Smith Montgomery&quot;&gt;&lt;/m-avatar&gt; Propriedades Propriedade Atributo Descrição Type Default dataSource src URL da imagem ou nome do usuário string undefined dataAlt alt Descrição alternativa string undefined Métodos validURL() =&gt; Boolean Check if a given URL is valid Returns Type: Boolean validURL() =&gt; String Get initials of first and last names from a given string Returns Type: String",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//avatar/",
    "relUrl": "/avatar/"
  },
  "2": {
    "id": "2",
    "title": "Boas Práticas - HTML e CSS",
    "content": "Boas Práticas - HTML e CSS Conteúdo Arquivo normalize BEM Aninhamento CSS Sobrescrições “Stickiness” Mixins VS Placeholders Variáveis Performance SVG Diversos Arquivo normalize Todos os projetos devem ter um Já que cada browser tem a sua própria forma de renderizar certas tags HTML, esse arquivo fica responsável por sobrescrever essas regras e criar sua própria configuração de regras Normalmente, sobrescreve regras de tags como &lt;html&gt; e &lt;body&gt;. normalize.scss html, body { margin: 0; min-height: 100vh; } BEM B.E.M. é uma metodologia que ajuda desenvolvedores a entenderem melhor o código sem precisar checar a interface online. A sigla representa Block, Element, Modifier (em português: Bloco, Elemento e Modificador), significa que uma classe de componente pode ser dividida em elementos (nesse caso você pode acrescentar dois underlines) e/ou modificadores (nesse caso você pode adicionar 2 hífens), então se você quiser escrever classes específicas de um componente, como um componente de notificação, você pode fazer algo assim: HTML &lt;div class=&quot;notification notification—-success&quot;&gt; &lt;span class=&quot;notification__message&quot;&gt;Changes saved&lt;/span&gt; &lt;button class=&quot;button&quot;&gt;Dismiss&lt;/button&gt; &lt;/div&gt; notification é a classe pai, esse também deve ser o nome do componente que está sendo criado notification—-success é a classe modificadora (hífens duplos), significa que “success” é um tipo de notificação notification__message é a classe do elemento (underline duplo), quer dizer que “button” é parte do componente de notificação também é um bloco, e pode ser utilizado dentro de outros blocos, assim aumenta a reutilização de componentes Quando começar a nomear as classes, tenha em mente que elas devem ser genéricas para poderem ser usadas em diversos contextos HTML MAU &lt;button class=&quot;application-form__button—-blue&quot;&gt; &lt;i class=&quot;application-form__button—-blue__save-icon&quot;&gt;&lt;/i&gt; &lt;span class=&quot;application-form__button—-blue__label&quot;&gt;Save&lt;/span&gt; &lt;/button&gt; HTML BOM &lt;button class=&quot;button button—-blue&quot;&gt; &lt;i class=&quot;button__check-icon&quot;&gt;&lt;/i&gt; &lt;span class=&quot;button__label&quot;&gt;Save&lt;/span&gt; &lt;/button&gt; Você pode ter ambas as estruturas em uma mesma classe, como notification__button—-danger Evite múltiplas estruturas na mesma classe, como notification__button__message__icon Dê preferência a criar modificadores na classe pai do componente. Dessa forma você pode centralizar uma configuração de comportamentos específicos nos seus arquivos CSS. SCSS BOM .notification—-success { .notification__button { background-color: green; } } Aninhamento CSS Evite ao máximo aninhar classes. Dessa forma, se houverem mudanças de estrutura em um componente específico, essa mudança não afetará muito a UI. Aninhamento pode ocorrer em situações que o desenvolvedor está usando componentes dentro de outros componentes. Nesse caso você pode… SCSS BOM .notification__button { /* class for notification component */ … .button { /* class for button component */ … } } Classes CSS devem ser o mais independente possível, então tenham em mente que classes customizadas devem ser declaradas na raiz do arquivo quando possível SCSS MAU .notification { … .notification__message { … .notification__message-content { … } } } SCSS BOM .notification { … } .notification__message { … } .notification__message-content { … } Sobrescrições Sobrescrições são delicadas já que alguns browsers possuem diferentes regras de o que estará sobrescrevendo o que, a seguir temos algumas soluções alternativas para isso, você pode: Ao invés de sobrescrever código, você pode usar pseudo classes CSS para adicionar especificidade a elementos. Veja mais em pseudo-classes. HTML &lt;div class=&quot;notification notification—-success&quot;&gt; &lt;span class=&quot;notification__message&quot;&gt;Changes saved&lt;/span&gt; &lt;button class=&quot;notification__button&quot;&gt;Dismiss&lt;/button&gt; &lt;/div&gt; SCSS MAU .notification { background-color: blue; /* default background-color */ padding: 10px 20px; text-align: center; } SCSS BOM .notification:not(.notification—-transparent) { background-color: blue; /* Aplica esse background-color em todos as notificações que não recebem a classe notification--transparent */ } .notification { padding: 10px 20px; text-align: center; } .notification—-transparent { background-color: transparent; border-top-left-radius: 5px; } SCSS BOM .button-group .button:first-child { border-top-left-radius: 5px; border-bottom-left-radius: 5px; } .button-group .button:last-child { border-top-right-radius: 5px; border-bottom-right-radius: 5px; } .button-group .button:not(:first-child):not(:last-child) { border-radius: 0; } “Stickiness” Use position: sticky para deixar elementos “colados” ao viewport Evite usar javascript para isso, é desnecessário Tenha em mente que o position: sticky só funciona em recipientes cujo pai imediato NÃO possui um overflow: scroll/auto/hidden. Se você for usar nos títulos de uma tabela, aplique-o nas &lt;th&gt; e use uma estratégia de z-index para os headers e as colunas Podem haver problemas entre compatibilidade de browsers, nesse caso use os pacotes de prefixos dos browsers quando necessário Há casos raros em que dependendo da tela em que um componente está sendo renderizado, as referências de top/bottom/left/right podem se alterar Mixins VS Placeholders @mixin devem ser usados quando você estiver lidando com atributos que podem receber valores variados, funcionam como uma função. Use @include para aplicar os mixins Use @extend para aplicar os placeholders %placeholder é um helper do Sass que funciona como um grupo de atributos e valores que você pode adicionar a diferentes classes através de uma âncora (o nome do placeholder) Use placeholders quando você quiser replicar atributos CSS (e seus valores fixos) entre classes. Use mixins quando quiser configurar atributos que podem ter diferentes valores. SCSS (ESTRUTURA MIXIN E PLACEHOLDER) @mixin mixin-name ($variable1, $variable2) { attributeA: $variable1; attributeB: $variable2; } %placeholder-name { attributeA: value1; attributeB: value2; } SCSS (MIXIN) @mixin button-style ($background, $font-color) { background-color: $background; color: $font-color; } .button—-success { @include button-style(green, white); } .button—-danger { @include button-style(red, white); } CSS FINAL .button—-success { background-color: green; color: white; } .button—-danger { background-color: red; color: white; } SCSS (PLACEHOLDER) %align-center { display: block; margin-left: auto; margin-right: auto; } .main-container { @extend %align-center; } .img { @extend %align-center; } CSS FINAL .main-container, .img { display: block; margin-left: auto; margin-right: auto; } Variáveis Variáveis de novos componentes e templates devem ter seus próprio arquivo. Mas as variáveis devem ser seccionados via comentários para evitar confusão …/styles/variables.scss /* TEMPLATES VARIABLES */ $section-padding: 20px; $section-header-height: 40px; /* COMPONENTS VARIABLES */ /* Button variables */ $button-padding: 10px 15px; /* Notification variables */ $notification-padding: 25px; $notification-max-width: 450px; Performance Use componentes nativos do HTML (&lt;input&gt;, &lt;button&gt;, &lt;a&gt;, &lt;nav&gt;) sempre que possível, isso diminui significantemente problemas de compatibilidade de browser Use especificações nativas do WAI-ARIA no HTML por questões de acessibilidade (aria-label, aria-hidden, aria-labelledby, aria-discribedby), isso também resolve alguns problemas de compatibilidade de browser HTML &lt;button aria-label=&quot;Save form&quot;&gt; &lt;i class=&quot;check-icon&quot;&gt;&lt;/i&gt; &lt;/button&gt; Considere a necessidade real de pacotes de recursos visuais, imagens e vídeos podem impactar a performance de sua página web significantemente Opite por usar SVGs para referências gráficas, como ícones SVG SVGs são muito recomendados para serem usados em websites já que são vetores e precisam que pouquíssimo suporte Você não precisa de CSS para customizar seu SVG quando inserido diretamente no HTML (usando a tag &lt;svg&gt;), você pode usar atributos SVG para isso. Quanto mais se usar atributos HTML para isso, melhor será a compatibilidade entre browsers SVGs são suportados em e-mails (web e cliente) para os SO mais usados. SVGs também podem suportar animações e gradientes (sem CSS) Diversos Mantenha o código DRY (Don’t Repeat Yourself), então tenha em mente que o CSS deve ser reusável Quanto mais específico for uma declaração de CSS, mais forte será a regra que você estiver aplicando. Se houverem arquivos CSS específicos de componentes e outros específicos de templates, evite misturá-los, cada um deve ter seu próprio arquivo Evite usar o atributo float o máximo possível, ele faz com que elementos percam sua referência “física” na página. O atributo position deve ser reservado para aplicar stickiness ou posicionar elementos que estão bloqueados pelos limites dos seus recipientes pai !important só deve ser usado para sobrescrever CSS inline, que devem ser resultado de atributos manipulados via javascript, Evite, a todo custo, escrever CSS inline manualmente, isso deve ser reservado para interferências do javascript Para escrever CSS destinados a aparelhos mobile, use media queries e variáveis de viewport, mas se puder escrever um código mais reusável para todas as plataformas, melhor ainda. Para testar responsividade, é bom contar com simuladores de dispositivos além do browser desktop, isso porque os simuladores conseguem replicar comportamentos de controladores HTML (input datepicker, input number, input radio…) que são diferentes entre desktop e mobile. Sass possui o helper “&amp;” que pode ser bastante útil, pode ser usado para “cascatear” classes da seguinte forma: SCSS .notification { &amp;__message { font-size: 14px; text-align: center; } &amp;__button { padding: 10px 12px; color: white; } } CSS FINAL .notification__message { font-size: 14px; text-align: center; } .notification__button { padding: 10px 12px; color: white; } Apesar do SASS disponibilizar isso para otimização de código, é recomendado que se use somente quando todo o CSS de componentes seguir esse padrão, caso contrário pode causar confusão entre desenvolvedores, perda de tempo e até declarações de CSS repetidas entre os arquivos de CSS. As unidades de medida mais comuns em CSS são pixels (px), porcentagem (%) e REM (rem) pixel: medida fixa percentage: medida relativa as dimensões do container pai REM: medida relativa ao font-size aplicado no &lt;body&gt;",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//boas-praticas/",
    "relUrl": "/boas-praticas/"
  },
  "3": {
    "id": "3",
    "title": "Button",
    "content": "Button O m-button é o botão do Macaw. É possível desabilitá-lo ou adicionar um tooltip a ele. Exemplo Button Button disabled HTML &lt;m-button class=&quot;my-button&quot; title=&quot;Button default&quot;&gt;Button&lt;/m-button&gt; &lt;m-button class=&quot;my-button--disabled&quot; title=&quot;Button disabled&quot; disabled&gt;Button disabled&lt;/m-button&gt; Propriedades Propriedade Atributo Descrição Tipo Default disabled disabled Botão desabilitado boolean false tooltip title Tooltip do botão string undefined Métodos myTip() =&gt; Promise&lt;string&gt; Method showPrompt Returns Type: Promise&lt;string&gt;",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//button/",
    "relUrl": "/button/"
  },
  "4": {
    "id": "4",
    "title": "Colors",
    "content": "Colors Tema CESAR $white $frost $ice $light-gray $lightest-gray $med-gray $gray $dark-gray $dark-black $orange",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//colors/",
    "relUrl": "/colors/"
  },
  "5": {
    "id": "5",
    "title": "Footer",
    "content": "Footer O m-footer permite exibir informações de rodapé e é aberto para receber mais notas que se julgar necessário. Exemplo Lorem Lorem HTML &lt;m-footer type=&quot;block&quot;&gt;Lorem&lt;/m-footer&gt; &lt;m-footer type=&quot;line&quot;&gt;Lorem&lt;/m-footer&gt; Propriedades Propriedade Atributo Descrição Type Default footerType type Estilo do footer (line ou block) string undefined",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//footer/",
    "relUrl": "/footer/"
  },
  "6": {
    "id": "6",
    "title": "Header",
    "content": "Header O m-header permite exibir informações da marca como logo e nome, além de avatar do avatar do usuário logado com seu nome. Usando um slot específico ainda é possível posicionar a logo e o texto adicional que se julgar necessário. Exemplo Lorem ipsum Dolor sit amet HTML &lt;m-header brand-name=&quot;Minha Marca&quot; avatar-source=&quot;https://cms.qz.com/wp-content/uploads/2018/12/earring2.png&quot; avatar-name=&quot;Regina Phalange&quot;&gt; &lt;span slot=&quot;brand-logo&quot; class=&quot;content-header__logo&quot;&gt; &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 289 116.318&quot;&gt; &lt;path fill=&quot;#F07E2A&quot; d=&quot;M289,57.568c0,32.395-64.822,58.75-144.5,58.75S0,89.963,0,57.568c0-13.666,11.725-26.957,33.013-37.426 C53.891,9.875,82.993,2.738,114.958,0.046L115.5,0v4.104l-0.436,0.056c-33.477,4.346-55.97,15.662-55.97,28.158 c0,16.542,38.312,30,85.405,30s85.405-13.458,85.405-30c0-12.41-22.292-23.698-55.471-28.089L174,4.172V0.043l0.543,0.047 c31.847,2.73,60.826,9.879,81.602,20.131C277.332,30.676,289,43.939,289,57.568z M83.5,28.672c0,12.212,27.364,22.146,61,22.146 s61-9.935,61-22.146c0-10.602-19.885-19.514-48.357-21.673l-0.538-0.041v3.153l0.442,0.052c14.645,1.715,23.045,5.041,23.045,9.126 c0,5.873-16.299,10.834-35.592,10.834s-35.592-4.961-35.592-10.834c0-4.119,8.476-7.455,23.255-9.152l0.442-0.051V6.942l-0.537,0.04 C103.473,9.113,83.5,18.032,83.5,28.672z&quot;/&gt; &lt;/svg&gt; &lt;/span&gt; &lt;span slot=&quot;header-left&quot;&gt; Lorem ipsum&lt;/span&gt; &lt;span slot=&quot;header-right&quot;&gt; Dolor sit amet&lt;/span&gt; &lt;/m-header&gt; Slots Slot Descrição brand-logo Nome da marca - extremo esquerdo header-left Dados complementares à esquerda header-right Dados complementares à direita Propriedades Propriedade Descrição Tipo Default brandName Nome da marca string undefined avatarName Nome do usuário logado string undefined avatarSource Imagem de avatar do usuário logado string undefined",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//header/",
    "relUrl": "/header/"
  },
  "7": {
    "id": "7",
    "title": "Icons",
    "content": "Icons O m-icon conta com um pacote inicial de 37 ícones. Especialmente esse componente terá sua função shadow desativada para permitir maior poder de customização. Exemplo HTML &lt;m-icon name=&quot;bell&quot;&gt;&lt;/m-icon&gt; &lt;m-icon name=&quot;calendar&quot;&gt;&lt;/m-icon&gt; Lista completa de ícones Propriedades Propriedade Atributo Descrição Tipo Default name   Nome do ícone selecionado string undefined tootilp title Icon tooltip string undefined",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//icons/",
    "relUrl": "/icons/"
  },
  "8": {
    "id": "8",
    "title": "Home",
    "content": "Macaw (arara) Os termos arara e ará designam várias aves psitaciformes de grande porte da tribo Arini, cauda longa e um bico curvado resistente. Geralmente, os gêneros comumente chamados de araras são os gêneros Ara, Anodorhynchus e Cyanopsitta. Wikipedia O que é? O Macaw se trata de um framework que busca trazer uma identidade visual e consistência para os serviços internos do CESAR. Para que possa ser agregado em diversos sistemas com possibilidades de linguagens e tecnologias diferentes, foi escolhida a “suíte” de Web Components com Typescript. Para auxiliar com a construção e compilação desses componentes, também estamos usando o StencilJS que possui uma gama de opções que facilitam esse processo, além de ter grande suporte na web. O que tem de tão especial nos Web Components? Usando elementos customizados Usando shadow DOM Usando templates e slots Vamos começar Via tag de script Adicione a tag script &lt;script src=&#39;https://unpkg.com/@cesarbr/macaw/dist/macaw.js&#39;&gt;&lt;/script&gt; logo antes do fechamento da tag &lt;head&gt;; Agor você pode usar qualquer componente em seus templates, JSX, html e etc. Via NPM Execute o comando: $ npm install @cesarbr/macaw --save Importe o macaw: import { defineCustomElements as macaw } from &#39;@cesarbr/macaw/loader&#39;; Inicie o macaw macaw(window); Agora você pode usar qualquer componente em seus templates, JSX, html e etc. Contato Caso queira entrar em contato conosco, dar feedbacks ou compartilhar sentimentos, pode mandar um e-mail pra gente",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//",
    "relUrl": "/"
  },
  "9": {
    "id": "9",
    "title": "Table Body",
    "content": "Table Body O m-tbody é usado principalmente para alimentar a seção do body da m-table. Propriedades Propriedade Descrição Tipo Default body Linhas do body da tabela array undefined header Células do body da tabela array undefined",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//table-body/",
    "relUrl": "/table-body/"
  },
  "10": {
    "id": "10",
    "title": "Table Header",
    "content": "Table Header O m-thead é usado principalmente para alimentar a seção do header da m-table. Propriedades Propriedade Descrição Tipo Default body Linhas do body da tabela array undefined header Células do body da tabela array undefined",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//table-header/",
    "relUrl": "/table-header/"
  },
  "11": {
    "id": "11",
    "title": "Table",
    "content": "Table A m-table trata de uma tabela Macaw onde é possível passar valores em formato de string para suas células. Ela usa , automaticamente, os componentes m-thead e m-tbody para alimentar seu conteúdo. Exemplo HTML &lt;m-table strip=&#39;true&#39;&gt;&lt;/m-table&gt; JS const myTable = document.querySelector(&#39;m-table&#39;); myTable.data = [{id: &#39;01&#39;, name: &#39;Pedro&#39;, job: &#39;Coelho&#39; }, {id: &#39;02&#39;, name: &#39;Patrick&#39;, job: &#39;Estrela&#39; }]; myTable.dataHeaders = [{title: &#39;ID&#39;, key: &#39;id&#39;}, {title: &#39;Name&#39;, key: &#39;name&#39;}, {title: &#39;Job&#39;, key: &#39;job&#39;},]; Propriedades Propriedade Descrição Tipo Default data Dados para o body da tabela object undefined dataHeaders Dados para o header da tabela object undefined strip Estilo da tabela boolean false",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//table/",
    "relUrl": "/table/"
  },
  "12": {
    "id": "12",
    "title": "Typography",
    "content": "Typography Escala de fonte Element Example Size Weight Case Use cases H1 Lorem ipsum dolor sit. 22 600 Sentence Pages header H2 Lorem ipsum dolor sit. 20 600 Sentence TBD H3 Lorem ipsum dolor sit. 18 600 Sentence TBD H4 Lorem ipsum dolor sit. 16 600 Sentence TBD H5 Lorem ipsum dolor sit. 14 600 Sentence TBD H6 Lorem ipsum dolor sit. 12 600 Sentence TBD Subtitle 1 Lorem ipsum dolor sit. 16 400 Sentence TBD Subtitle 2 Lorem ipsum dolor sit. 14 400 Sentence TBD Body 1 Lorem ipsum dolor sit. 16 400 Sentence TBD Body 2 Lorem ipsum dolor sit. 14 400 Sentence TBD Button Lorem ipsum dolor sit. 14 700 Sentence Buttons Caption Lorem ipsum dolor sit. 12 400 Sentence TBD Overline Lorem ipsum dolor sit. 11 400 All caps TBD Label Lorem ipsum dolor sit. 14 600 Sentence Form field label Web Regra CSS padrão web para fontes sans-serif font-family: system-ui,-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,Oxygen-Sans,Ubuntu,Cantarell,&quot;Fira Sans&quot;,&quot;Droid Sans&quot;,&quot;Helvetica Neue&quot;,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;; Regra CSS padrão web para fontes monospace font-family: SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;",
    "url": "https://cesarbr.gitlab.io/cesar-apps/macaw/site//typography/",
    "relUrl": "/typography/"
  }
  
}
